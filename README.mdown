UIView+Badge
==============

A simple addition to UIView that allows any view to display a badge, similar to the
badge Apple provides for UITabBarItem.

Usage
=====
The Xcode project includes an example view controller. To use in your own project:

1. Drag UIView+Badge.h and UIView+Badge.m into your project.

2. Import the header file, and set the badge value via the <code>badge</code> accessor
   on UIView.


        #import <UIKit/UIKit.h>
        #import "UIView+Badge.h"
        
        @implementation MyController
        -(void)viewDidLoad {
            self.button.badge.badgeColor = [UIColor orangeColor];
            self.button.badge.badgeValue = 13;
        }
        @end

  
Note: Setting the badgeValue on a UIView's badge will cause it to be laid out.
  
Display Options
===============

The badge view has several properties that affect how it looks:

1. <code>centerOffset</code>: By default, the badge will be placed on the center left. It is possible to fine tune the position of the badge by creating a <code>CGSize</code> value where <code>width</code> defines the position offset in width (- left, + right), and <code>height</code> defines the position offset in height (same rules as in width).

2. <code>verticalAlign</code>: By default, the badge is in the middle. Change this option to relocate the badge vertically. Other options are top and down.

3. <code>horizontalAlign</code> By default, the badge is in the left. Change this option to relocate the badge horizontally. Other options are center and right.

4. <code>font</code>: The font the number inside the badge will use. The size of the badge
   is adjusted for this.
   
5. <code>badgeColor</code>: The background color inside the badge.

6. <code>outlineColor</code>: The color of the outline around the badge.

7. <code>outlineWidth</code>: The width of the outline around the badge.

8. <code>displayWhenZero</code>: The badge normally doesn't render if the badgeValue is zero.
   This setting allows you to override that.
